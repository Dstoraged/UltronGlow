// src/locales/lang/en.js
export default {
  appname: "The UltronGlow Blockchain Explorer", //The UltronGlow Blockchain Explorer
  testappname: "Meta Testnet Explorer", //Glow Testnet Explorer

  welcomeMsg: "Welcome to your UTG blockchain browser app",
  comm: {
    showMore: "Show more",
    stow: "Stow",
    fail: "Fail",
    success: "success",
    clickLoad: "click to load more",
    bottomLine: "I have a bottom line",
    just: " just ",
    second: " secs ",
    minute: " min ",
    hour: " hr ",
    day: " days ",
    week: " weeks ",
    month: " months ",
    year: " years ",
    time: "Time",
    before: "ago",
    firstPage: "First",
    lastPage: "Last",
    goto: "Go to",
    page: "Page",
    show: "Show",
    selected: "select",
    records: "records",
    noData: "No Data",
    nav: "Navigation",
    language: "Language",
    community: "Community",
    searchTips: "Address/Transaction hash/Block height…",
    search: "Search",
    alreadyTran: "Verified Txns",
    waitTran: "Pending Txns",
    close: "Cancel",
    check: "Check",
    searchNoData: "No information related to “{0}” ！",
    backToHome: "Back",
    server: "Server",
    pocket: "wallet",
    website: "UltronGlow Website",

    filter: "Filter",
    clear: "Clear",

    switchlanguage: "Switch Language: {0}",

    confirmButtonText: 'OK',
    cancelButtonText: 'Cancel',
    restake: "{0} Restake",
    exited:"Exited"
  },

  menu: {
    Home: "Home",

    Blockchain: "Blockchain",
    block: "Blocks",
    tran: "Transactions",
    absent: "Absent",

    ViewTxns: "View Txns",
    ViewPendingTxns: "View Pending Txns",
    ViewContractInternalTxns: "View Contract Internal Txns",
    ViewBlocks: "View Blocks",
    ForkedBlocks: "Forked Blocks (Reorgs)",
    ViewUncles: "View Uncles",
    TopAccounts: "Top Accounts",
    VerifiedContracts: "Verified Contracts",

    pledgeLock: "Pledge Lock",
    nodeaward: "Block Reward Lock",
    nodeLock: "PoS Pledge Lock",
    storageLock: "Storage Reward Lock",

    BlockRewards: "Block Reward",
    storagerewarddetails: "Storage Reward Details",
    storagepledgelock: "Storage Pledge Lock",
    Leasereward: "Lease Reward ",
    Lockrelease: "Lock Reward",

    token: "Token",
    tokenUrc20: "URC20 Token",
    erc20transfers: "View URC20 Transfers",
    tokenUrc721: "URC721 Token",
    erc721transfers: "View URC721 Transfers",
    tokenUrc1155: "URC1155 Token",
    erc1155transfers: "View URC1155 Transfers",

    contract: "Contract",
    accounts: "Address",


    node: "Node",
    ultronnode: "Ultron Node",
    storagenode: "Storage Server Node",

    miner: "Storage Node",
    storagemining: "Storage Mining",

    TokenLock: "Token Lock",
    PoSRewardLocked: "PoS Reward Locked",
    PoSRRewardLocked: "Grant Reward Locked",
    PoTSRewardLocked: "Service Reward Locked",
    PoSPledgeLocked: "PoS Pledge Locked",
    PoSRPledgeLocked: "Grant Pledge Locked",
    PoTSPledgeLocked: "Service Pledge Locked",
    Resources: "Resources",

    TopStatistics: "Top Statistics",
    DeveloperAPIs: "Developer APIs",
    UltronGlowDirectory: "UltronGlow Directory",
    More: "More",
    Developers: "Developers",
    APIDocumentation: "API Documentation",
    VerifyContract: "Verify Contract",
    Explore: "Explore",
    GasTracker: "Gas Tracker",
    NodeTracker: "Node Tracker",

    market: "Market",
    menustorage: "Storage",
    storagemarket: "Storage Market",
    storagespace: "Storage Space",
    
    reward: "Reward",
    lock: "Lock",
    blockreward: "Block Reward",
    storagereward: "Storage Reward",
    ultronnodereward: "Ultron Node Reward",
    storagenodereward: "Revenue Address Reward",//Storage Server Reward
    nodeawarddetails: "Block reward details",
    exitpledgelock: "Exit pledge lock",
    entrustpledgeexitlock: "Entrusted Pledge Exit Lock",
    pledgereturnlock: "Pledge deposit return lock",
    storagerewarddetails: "Storage Server Reward details",//"Storage Reward details",
    rentalrewarddetails: "Rental Reward details",

    tools: "Tools",
    ultronnodemanagement: "Ultron Node Management",
    storagenodemanagement: "Storage Service Node Management",
    contractdep: "Smart Contract Online IDE Tool",
    wallet: "Wallet Download",
    rewardscalculator: "Service Reward Calculator",
    transferpath: "Transfer Path Query",
    Pledge: "Pledge",
    singin: "Sing in",
    langName: "Language",
    langzh: "CN",
    langen: "English",
    //CurrentNetwork: "Current Network: Mainnet Origin",
    // mainnet1: "Mainnet Origin",
    // mainnet2: "Testnet Origin",
    CurrentNetwork: "Current Network: Mainnet Beta", //Current Network: Mainnet Ultraspace
    testNetwork: "Current Network: Testnet",
    mainnet1: "Mainnet Meta",// "Mainnet Ultraspace",
    mainnet2: "Testnet",//"Testnet Ultraspace",
    testurl: "Testnet",//Glow Testnet Explorer
    mainurl: "Mainnet Beta",//Glow Mainnet Explorer

    my: "My",
    storage: "Storage management",
    storagerental: "My Rental",//Storage Rental
    revenuerental: "Rental List",
    storagepledge: "Storage Pledge",
    delegatemanage: "Delegate management",
    storagePool: "Storage Pool",
    storagePoolReward: "SP reward",
    entrustRewardLock: "Entrust reward lock"
  },

  footer: {
    footcontext: "Ultronscan is a Blockchain Explorer and Analytics Platform",
  },

  pagination: {
    show: "Show",
    redord: "Records ",
    pages: "Page {curPage} of {totalPage}",
    first: "First",
    last: "Last",
  },

  download: {
    title: "BaseMeta Extension",
    desc1: '1.unpacked compressed file "Basemeta.zip"',
    desc2: "2.browser=>extensions=>Developer mode(Open)",
    desc3: "3.Load the unpacked extension",
    btname: "Download",

    metamask1: "1. Log in to the Google plug-in store and search for MetaMask",
    metamask2: "plug in address:",
    metamask5: "2. Add UTG network, click the plug-in icon, click the network, and click 'add network'",
    metamask8: "add UTG formal network example",
  },
  home: {
    homeoverview: "Home Overview",
    utgprice: "UTG Price",
    transactions: "Transactions",
    gasprice: "GAS PRICE",
    marketcap: "MARKET CAP",
    blockheights: "BLOCK HEIGHT",
    nextelectionblock: "NEXT ELECTION BLOCK",
    ultronglowtransaction: "UltronGlow Transaction History In 14 Day",
    btc: "BTC",
    price: "PRICE",
    datetime: "Time",
    networkoverview: "Network Overview",
    activeultronnodes: "ACTIVE ULTRON NODES",
    totalnetworkstorage: "TOTAL NETWORK STORAGE",
    totalstoragetraffic: "TOTAL STORAGE TRAFFIC",
    totalpledgedutg: "TOTAL PLEDGED UTG ",
    totallockedutg: "TOTAL LOCKED UTG",
    totaladdresses: "TOTAL ADDRESSES",
    hoursposreward: "24 HOURS POS REWARD",
    hoursposrreward: "24 HOURS Grant REWARD",
    hourspotsreward: "24 HOURS Service REWARD24",
    hoursutgproduction: "24 HOURS UTG PRODUCTION",
    maxsupply: "MAX SUPPLY",
    circulatingsupply: "CIRCULATING SUPPLY",
    circulatingrate: "CIRCULATING RATE",
    hourstransactions: "24 HOURS TRANSACTIONS ",
    burntutg: "BURNT UTG",
    curgbtoutgradio: "PoC Service Reward Ratio",

    latestblocks: "Latest Blocks",
    TotaleblocksNumber: "Total {0} blocks",
    blockheight: "Block height",
    blocktime: "Block time",
    ultronnode: "Ultron Node",
    transactioninthisblock: "Transaction in this Block",
    blockreward: "Block reward",
    Viewallblocks: "View all blocks",

    latesttransactions: "Latest Transactions",
    TotaletransactionsNumber: "Total {0} Transactions",
    transactionhash: "Transaction hash",
    transactiontime: "Transaction time",
    from: "From",
    to: "To",
    fee: "Fee",
    value: "Value",
    status: "Status",
    ViewallTransactions: "View all Transactions",

    searchplaceholder: "Search by Address / Txn Hash / Block / Token / Ens",
    searchselect0: "All Filters",
    searchselect1: "Addresses",
    searchselect2: "Tokens",
    searchselect3: "Smart Contract",
    searchselect4: "Labels",
    searchselect5: "Websites",

    language: "Language",
    lang_cn: "Chinese",
    lang_en: "English",
    overview: "Overview",
    network: "",
    totalBlocks: "Blocks",
    totalTrans: "Transactions",
    walletAddr: "Accounts",
    avgBlockTime: "Avg Block Interval",
    home: "Home",
    blockchain: "Block Chain",
    pledgeLock: "Pledge Lock",
    block: "Blocks",
    tran: "Transactions",
    destroy: "Burnt UTG",
    mining: "Mining",
    absent: "Absent",
    show: "show",
    hide: "hide",
    showMore: "more",
    currentBlockNumber: "Total {0} blocks",
    tranNumber: "{0} Txns",
    verificationNode: "Ultron Node",
    blockReward: "Block Reward",
    seeMore: "More",
    currentTranNumber: "Total {0} Transactions",
    tranValue: "Transaction Amount ", //Value
    handleFee: "Handling Fee ", //Fee
    blockTranNumber: "Txn",
    more: "more",
    power: "Storage Reward",
    miner: "Active Miner",
    interest: "Reward Pool",
    //storage: "Storage power",
    storage: "Effective Storage",
    circulation: "Total Circulation Quantity",
    dug: "Total Dug Quantity",
    pledge: "Total Pledge Quantity",
    lock: "Total Lock Up Quantity",
    totalTransactionValue: "Total Storage Transaction",
    yesterTransactionValue: "New Transactions Yesterday",
    yesterNewAccount: "Address Added Yesterday",
    voterSize: "Current Voters",
    voterTotal: "Current Total Votes",
    voterProportion: "Voting Participation",
    desutg: "Burnt UTG",
    lastoutput: "Last 24 hours of output",
    nextelection: "Next election block",
    effectiveforce: "Storage Power",
    totalBlockNumber: "Block Height",
    storageminingpledge: "Current Storage Pledge",
  },

  block: {
    block: "Block",
    TotaleblockNumber: "Block #{fblock} to #{lblock} (Total of {count} blocks)",
    blockSearch: "Search Miner Address",
    Age: "Age",
    Txn: "Txn",
    Miner: "Miner",
    UltronNode: "Ultron Node",
    GasUsed: "Gas Used",
    BurntFees: "Burnt Fees",
    GasLimit: "Gas Limit",
    GasPrice: "Gas Price",
    reward: "Block Reward",

    BlocksDetails: "Blocks Details",
    BlockHeight: "Block Height",
    Size: "Size",
    Timestamp: "Timestamp",
    Hash: "Hash",
    ParentHash: "Parent Hash",
    Difficulty: "Difficulty",
    DifficultyTotal: "Difficulty Total",
    DifficultyNonce: "Difficulty Nonce",
    BlockReward: "Block Reward",
  },

  blockinfo: {
    tranNumber: "{0} Txns",
    hash: "Hash",
    parentHash: "Parent Hash",
    difficulty: "Difficulty",
    totalDifficulty: "Total Difficulty",
    nonce: "Nonce",
    lockAmount: "Lock Quantity",
    leftAmount: "Unlocked Quantity",
  },

  mining: {
    mining: "Mining",
    type: "Type",
    storage: "Mining",
    block: "Block Mining",
    miningNumber: "Mining Number",
    minerAddress: "Miner Address",
    currentMiningNumber: "Total {0} Mining",
  },

  blockdetail: {
    title: "Block  #{0}",
    Overview: "Overview",
    BlockHeight: "Block Height",
    Timestamp: "Timestamp",
    ReOrgDepth: "Re-Org Depth",
    Minedby: "Mined by",
    BlockReward: "Block Reward",
    UnclesReward: "Uncles Reward",
    //Difficulty: "Difficulty",
    TotalDifficulty: "Total Difficulty",
    Size: "Size",
    GasUsed: "Gas Used",
    //GasLimit: "Gas Limit",
    BaseFeePerGas: "Base Fee Per Gas",
    BurntFees: "Burnt Fees",
    ExtraData: "Extra Data",
    Hash: "Hash",
    ParentHash: "Parent Hash",
    Sha3Uncles: "Sha3Uncles",
    StateRoot: "StateRoot",
    Nonce: "Nonce",
  },

  absent: {
    absent: "Absent",
    absentRecord: "Absent block",
    currentAbsentNumber: "Total {0} Absent Number",
    absentSearch: "Search Absent Address",
    order: "Order",
    punishScore: "penalty points",
    punishPledgeNumber: "Punishment Pledge Number",
    punishCause: "Punishment Cause",
    punishTime: "Punishment Time",
    address: "Node Address",
    absentType: "Type",
    absentType1: "Absent Block",
    absentType2: "Not Involved block",
    blockNumber: "Block",
  },

  fblock: {
    title: "Forked Blocks",
    totalnumber: "A total of  {0} forked blocks found",
    Height: "Height",
    Age: "Age",
    Txn: "Txn",
    Uncles: "Uncles",
    Miner: "Miner",
    GasLimit: "Gas Limit",
    Difficulty: "Difficulty",
    Reward: "Reward",

    ReorgedBlock: "Reorged Block  #{0}",
  },

  uncles: {
    title: "Uncles",
    totalnumber: "Showing uncle (#{0} to #{0}) out of {0} total uncles",
    BlockHeight: "Block Height",
    UncleNumber: "Uncle Number",
    Age: "Age",
    Miner: "Miner",
    Reward: "Reward",

    Overview: "Overview",
    UncleHeight: "Uncle Height",
    UnclePosition: "Uncle Position",
    //BlockHeight: "Block Height",
    Hash: "Hash",
    ParentHash: "Parent Hash",
    Sha3Uncles: "Sha3Uncles",
    Minedby: "Mined by",
    Difficulty: "Difficulty",
    GasLimit: "Gas Limit",
    GasUsed: "Gas Used",
    Timestamp: "Timestamp",
    UncleReward: "Uncle Reward",
  },

  Transactions: {
    title:
      "More than > {counts} transactions found (Showing the last {lastcnt} records) ",
    currentTranNumber: "Total {0} transactions",
    currentBurntTranNumber:
      ",Total Burnt: {0},transactions Burnt: {1},Other Burnt: {2}",
    balanceTranNumber: "Total Burnt:",
    txinTranNumber: ",Transactions Burnt:",
    lockTranNumber: ",Lock Burnt:",
    gasTranNumber: ",Gas Burnt:",
    pledgeTranNumber: ",Pledge Burnt:",
    nontxTranNumber: ",Other Burnt:",
    otherBurnt: "Non Transactions Burnt",
    addrSearch: "Search From or To Address",

    TxnHash: "Txn Hash",
    Hash: "Hash",
    Method: "Method",
    Block: "Block",
    Age: "Age",
    From: "From",
    To: "To",
    Value: "Value",
    TxnFee: "Txn Fee",
    time: "time",
    TransactionDetails: "Transaction Details",
    Transactionhash: "Transaction hash",
    Transactiontime: "Transaction time",
    status: "Transaction Status",
    Blocks: "Blocks",
    Nonce: "Nonce",
    TransactionAmount: "Transaction Amount",
    HandlingFee: "Handling Fee",
    GasUsed: "Gas used",
    GasLimit: "Gas limit",
    GasPrice: "Gas Price",

    AdditionalInfo: "Additional Info",
    BlockConfirmations: "{0} Block Confirmations",
    TransactionFee: "Transaction Fee",
    GasInfo: "Gas Info",
    GasContent: "{0} Gas Used From {0} Gas Limit@{0}({0})",
    intheposition: "in the position {0}",
    Seemoredetails: "See more details",

    type: "Transaction Type",
    common: "Ordinary transaction",
    stProof: "Grant proof",
    Bind: "Binding income address",
    Unbind: "Unbind revenue address",
    Rebind: "Rebind",
    Deposit: "System Settings",
    stReq: "Grant pledge",
    stExit: "Grant pledge exit",
    stset: "Parameter setting",
    stRent: "Lease Request",
    stRentPg: "Lease Pledge",
    stReNew: "Renewal Request",
    stReNewPg: "Renew Pledge",
    stRescind: "Rescind",
    stReValid: "Space Reclamation Proof",
    chPrice: "Adjust lease price",
    CndLock: "Node pledge lock parameter setting",
    RwdLock: "Reward Lock Parameter Setting",
    ExchRate: "SRT exchange rate Setting",
    Exch: "SRT exchange",
    CandReq: "Node pledge",
    CandExit: "Node pledge exit",
    CandPnsh: "CandPnsh",
    FlwLock: "Lease lock parameter settings",
    chbw: "Modify Storage bandwidth",
    TlcChAdmin1: "administrator permission transfer",
    TlcPickup: "user withdrawal amount",
    ContractNew: "New Contract",
    TokenNew: "create a new token",
    TokenTransfer: "token transfer",
    stCatchUp: "supplementary pledge deposit",
    CandEntrust: "POS entrusted pledge",
    CandETExit: "POS entrusted pledge exit",
    CandChaRate: "Modify Charge rate",
    addsp: "Add Storage Pool",
    spchpg: "SP Adjusts Pledge",
    spremovesn: "SN Move",
    spwtpg: "SP entrusted pledge",
    spwtfd: "SP entrusted transfer",
    spwtexit: "SP entrusted Exit",
    spexit: "SP Exit",
    spfee: "SP Commission setting",
    spetrate: "SP Reward Distribution Ratio",
    sprvebind: "SP Revenue address setting",
    editmgaddr: "SN Change Admin Address",
    stchpg: "SN Adjustment pledge",
    stwtreward: "SN Transfer of delegation",
    setsp: "SN Setting Storage pool",
    exitsp: "SN Exiting SP",
    stwtpg: "SN Delegate",
    wtpgexit: "SN Delegation exit",
    wtfd: "SN Transfer of delegation",
    PoSwtfd:"POS Transfer of delegation",
    streplace: "SN Migration",
    stwtreward:"Reward Distribution Ratio",
    newaddrsss: "new administrator address",
    withdrawalamount: "withdrawal amount",
    useraddrsss: "extract account",
    transferamount: "Transfer amount",
    contractaddress: "Contract address",

    trandestroy: "Transaction Burnt",
    lockdestroy: "Lock Burnt",
    gasdestroy: "Gas Burnt",
    pledgedestroy: "Pledge Burnt",
    filterAddressTxn: "Filter Address / Txn Hash"
  },

  lockdestroy: {
    currentTotal: "Total {0} data",
    minerAddress: "Miner Address",
    type: "Lock Type",
    blockNumber: "Block",
    burningratio: "Burnt Ratio",
    burningamount: "Burnt Amount",
    burningaddress: "Burnt Address",
  },

  trandetail: {
    title: "Transaction Details",
    Overview: "Overview",
    transactionHash: "Transaction Hash",
    Status: "Status",
    Block: "Block",
    Timestamp: "Timestamp",
    From: "From",
    to: "To",
    TokensTransferred: "Tokens Transferred",
    Value: "Value",
    TransactionFee: "Transaction Fee",
    GasPrice: "Gas Price",
    GasUsed: "Gas Used",
    GasLimit: "Gas Limit & Usage by Txn",
    GasFees: "Gas Fees",
    BurntTxnSavingsFees: "Burnt & Txn Savings Fees",
    Others: "Others",
    InputData: "Input Data",
    tranValue: "Value", //Transaction Amount
    handleFee: "Transaction Fee", //Fee  //Handling Fee
    verifyBlock: "{0} Confirmation",

    tokentran0: "URC-20 Tokens Transferred",
    tokentran1: "URC-721 Tokens Transferred",
    tokentran2: "URC-1155 Tokens Transferred"
  },

  pdtransactions: {
    title: "Pending Transactions",
    totalnumber:
      "A total of {0} pending txns found(Showing the last {0} records)",
    Hash: "Hash",
    Nonce: "Nonce",
    Method: "Method",
    LastSeen: "Last Seen",
    GasLimit: "Gas limit",
    GasPrice: "Gas Price",
    From: "From",
    To: "To",
    Value: "Value",
  },

  wnetpledge: {
    title: "Whole Network Pledge",
    currentTotal:
      "Total {0} data, Total Pledge: {1} Node Pledge: {2} Storage Service Pledge: {3}",
    nodeSearchAddress: "Search Node Address",
    nodeAddress: "Node Address",
    type: "Pledge Type",
    type1: "Node pledge",
    type2: "Storage service pledge",
    pledgeAmount: "Pledge Amount",
    pledgeTime: "Stake-in Time",
  },
  wnetlock: {
    title: "Whole Network Lock",
    currentTotal: "Total {0} data,Reward: {1},Lock: {2},Release: {3}",
    currentNumber: "Total {0} records",
    totalreward: "Total reward:",
    amongblockreward: ",Block reward:",
    posrreward: ",Grant reward:", //" Posr reward"
    rentalreward: ",Service reward:", // ",Rental reward:"
    curlock: "Lock:",
    currelease: ";Release:",

    nodeSearchAddress: "Search Node Address",
    nodeAddress: "Node Address",
    type: "Lock Type",
    type1: "Node Lock",
    type2: "Storage service Lock",
    revenuesaddress: "Reward Address",
    reward: "Reward",
    lockAmount: "Lock Amount",
    leftAmount: "Unlocked Quantity",
    blockNumber: "Block",
    unlocktime: "Unlock Time",
  },

  lock: {
    lock: "Lock",
    extract: "Extract",
    currentLockNumber: "Total {0} Locking",
    currentReleaseNumber: "Total {0} Records",
    currentTotal: "Total {0} Locking,Reward: {1} Release: {2}",
    currentPledgeNumber: "Total {0} Pledge Records",
    currentNumber: "Total {0} records",

    totalreward: "Total reward:",
    posrreward: ",Grant reward:", //" Posr reward"
    rentalreward: ",Service reward:", // ",Rental reward:"
    curlock: "Lock:",
    currelease: ";Release:",
    totalBurnt: "Total Burnt:",
    posrBurnt: ",Grant Burnt:",
    rentalBurnt: ",Service Burnt:",

    lockSearch: "Search Locking Address",
    minerSearch: "Search Miner Address",
    pledgeSearch: "Search Pledge Address",
    extractSearch: "Search Extract Address",
    addressSearch: "Search Miner or Reward Address",
    order: "Order Number",
    type: "Lock Type",
    address: "Lock Address",
    revenuesaddress: "Reward Address",
    totalAmount: "Lock Amount",
    leftAmount: "Unlocked Quantity",
    lockNumber: "Unlock Time",
    teamLock: "Team Lock",
    teamFreed: "Team Freed",
    nodeaward: "Block Reward",
    nodeawardNumber: "Block Reward Lock Amount",
    nodeawardlock: "Block reward Lock",
    nodeawardAmount: "Block Reward",
    nodeawardtotal: "Block Rewards",
    nodeawardFreed: "Block Reward Release",
    nodeLock: "PoS Pledge Lock",
    nodeFreed: "PoS Pledge Freed",
    storageLock: "Storage Reward Lock",
    storageFreed: "Storage Reward Freed",
    blockNumber: "Block",
    LockedReward: "Locked Reward",
    RewardRelease: "Reward Release",
    burningratio: "Burnt Ratio",
    burningamount: "Burnt Amount",
    burningaddress: "Burnt Address",
    rewardAmount: "Reward",

    trustpledge: "Entrust Address",

    day: "Day",
    days: "Days",
    pledge: "Pledge",
    currentPledgeNumber: "Total {0} Pledge",
    pledgeType: "Pledge Type",
    node: "Node",
    nodeAddress: "Node Address",
    nodeSearchAddress: "Search Node Address",
    SearchAddress: "Search Node or Reward Address",
    state: "State",
    state11: "Pre-Candidate nodes",
    state12: "Ultron node",
    state13: "Exited node",
    state21: "Mining",
    state22: "Waiting Mining",
    state23: "Exit Mining",
    pledgeAddress: "Pledge Address",
    totalPledgeAmount: "Pledge Amount",
    currentExtractNumber: "Total {0} Extract Data",
    extractAddress: "Extracted Address",
    extractNumber: "Extracted Number",
    profitValReward: "Dividend Reward",
    extractFee: "Fee",
    minerLock: "Miner Pledge Lock",
    minerAddress: "Miner Address",
    profitaddress: "Reward Address",
    freedTime: "Freed Time",
    freed: "Freed Amount",
    minerFreed: "Miner Freed",
    freedDetails: "Freed Details",
    BandwidthLock: "Storage Reward Lock",
    bandwidthFreed: "Storage freed",

    WaitingReleased: "Waiting Released",
    Released: "Released",
    ReleasedReward: "Released Reward",
    ReleasedTime: "Released Time",
    Revenueaddress: "Revenue Address",

    minerDetails: "Miner Details",

    exitlockamount: "Node exit remaining lock",
    exitreleaseamount: "Node release",
    freedtype: "Type",
    alreleased: "Released Amount",
    blockrecord: "Block Record",
    releasedrecord: "Release Record",
    lockaddress: "Lock address",
  },
  token: {
    currentTokenNumber: "Total {0} Tokens",
    currentHoldersNumber: "Total {0} holders",
    Abbreviation: "Symbol",
    totalNumber: "Max Total Supply", //Total Circulation
    addressNumber: "Holders", //Holding Address
    tokenAddress: "Contract Management Address",
    addressSearch: "Search for Token Name or Address",
    decimal: "Decimals", //Decimal Point
    bit: "Bit",
    holder: "Holders",
    currentPeopleNumber: "Total {0} Holders",
    quantity: "Quantity",
    description: "Description",
    tokens: "Tokens",
    token: "Token Name",

    tokendetails: "{0} token details",
    overview: "Overview",
    price: "Price",
    totalsupply: "Total Supply",
    maxtotalsupply: "Max Total Supply",
    holders: "Holders",
    transfers: "Transfers",

    profilesummary: "Profile Summary",
    contract: "Contract",
    decimals: "Decimals",
    officialsite: "Official Site",
    socialprofiles: "Social Profiles",

    morethan: "More than",
    morethanNumber: "{0} transactions found",
    txnhash: "Txn Hash",
    method: "Method",
    age: "Age",
    from: "From",
    to: "To",

    rank: "Rank",
    address: "Address",
    percentage: "Percentage",
    value: "Value",
    analytics: "Analytics",

    info: "Info",
    market: "Market",
    volume24h: "Volume (24H)",
    marketcapitalization: "Market Capitalization",
    circulatingsupply: "Circulating Supply",

    readcontract: "Read Contract",

    title20: "URC-20 Tokens",
    title721: "Non-Fungible Tokens (NFT)",
    title1155: "Multi-Token Tokens",

    current20Number: "A total of {0} Token Contracts found",
    current721Number: "A total of {0} URC-721 Token Contracts found",
    current1155Number: "A total of {0} URC-1155 Token Contracts found ",
  },

  tokentransfers: {
    title20: "Token Transfers {0}",
    title721: "Non-Fungible Token Transfers {0}",
    title1155: "Multi-Token Token Transfers {0}",
    currentTranNumber: "Total {0} transactions",
    txnHash: "Txn Hash",
    block: "Block",
    age: "Age",
    from: "From",
    to: "To",
    value: "Value",
    token: "Token",
    tokenid: "TokenID",
    details: "Details"
  },
  tokenInventory: {
    inventory: "Inventory",
    currentNumber: " A total of {0} tokens found ",
    tokenid: "Token ID",
    owner: "Owner",
    lasttraded: "Last Traded",
  },

  contracts: {
    currentTokenNumber: "Total {0} Contracts",
    addrSearch: "Search Address",
    contractname: "Contract Name",
    Abbreviation: "Symbol", //Abbreviation
    totalNumber: "Max Total Supply", //Total Circulation
    addressNumber: "Holders", //Holding Address
    tokenAddress: "Address",
    decimal: "Decimals", //Decimal Point
    bit: "Bit",
    holder: "Holders",
    currentPeopleNumber: "Total {0} Holders",
    quantity: "Quantity",
    description: "Description",
    mainOwner: "Main Administrator",
    secondOwner: "Ordinary administrator",
    owner: "Token Rewards",//"Administrator",
    lockupperiod: "Lock period",
    releaseperiod: "Release period",
    releaseinterval: "Release interval",
    contractdetail: "Contract Details",
    overview: "Contract Overview",
    price: "Price",
    totalsupply: "Total Supply",
    holders: "Holders",
    transfers: "Transfers",
    balance: "Balance",
    contractCreator: "Contract Creator",
    contractCreator1: "Creator Address",
    contractCreator2: "Txn Hash",
    profilesummary: "More Info",
    contractAddress: "Contract Address",
    contract: "Contract",
    decimals: "Decimals",
    officialsite: "Official Site",
    socialprofiles: "Social Profiles",

    compiler: "Compiler",
    version: "Version",
    txns: "Txns",
    verified: "Verified",
    license: "License",
    deploymenttime: "deploy time",

    morethan: "More than",
    morethanNumber: "{0} transactions found",
    txnhash: "Txn Hash",
    method: "Method",
    age: "Age",
    from: "From",
    to: "To",

    rank: "Rank",
    address: "Address",
    percentage: "Percentage",
    value: "Value",
    analytics: "Analytics",

    info: "Info",
    market: "Market",
    volume24h: "Volume (24H)",
    marketcapitalization: "Market Capitalization",
    circulatingsupply: "Circulating Supply",

    readcontract: "Read Contract",
    contractcode: "Contract Source Code (Solidity)",

    ContractABI: "Contract ABI",
    Contractbin: "Contract Creation Code",
    copyabi: "Copy ABI to clipboard",
    copysourcecode: "Copy source code to clipboard",

    contractverify: "Contract Source Code Verified (Exact Match)",
    contractnames: "Contract Name",
    compilerversion: "Compiler Version",
    optimizationenabled: "Optimization Enabled",
    othersettings: "Other Settings",


    contractadminmsg: "Are you the contract creator? ",
    contractverified: "Verify and Publish",
    contractselfmsg: " your contract source code today!",

  },

  verifycontract: {
    VerifyContractTitle: "Verify Contract Source Code",
    contractaddress:
      "Please enter the Contract Address you would like to verify",
    contractname: "Please enter the Contract Name you would like to verify",
    compilertype: "Please select Compiler Type",
    compilerversion: "Please select Compiler Version",
    licensetype: "Please select Open Source License Type",
    pleaseselect: "Please select",
    uploadcontract: "Upload contract source code file",
    selectfile: "Select contract source code file",
    placeholder: "Please enter the contract address",
    verify: "VERIFY",
    verifystatus: "Verify Status",
    verifyresult: "Verify Result:",
  },

  accounts: {
    addrlist: "Address List",
    addr: "Address",
    addrSearch: "Search Address",
    currentAddrNumber: "Total {0} Address",
    rank: "Rank",
    balance: "Balance",
    market: "Percentage",
    tranTotal: "Txn Count",
    totalTran: "Total {0} Txns",
    tran: "Transactions",
    info: "Account Information",
    lastUpdateBlock: "Last update Block：",
    block: "Block",
    balanceHistory: "Balance History",
    trendChart: "Trend",
    waterDetails: "Details",
    variety: "Change(UTG)",
    amount: "Amount(UTG)",
    scanReCode: "Wallet Address",
    allTran: "All Txns",
    outgoTran: "Outputs Txns",
    acceptedTran: "Inputs Txns",
    copySuccess: "Copy successful",

    profitAddress: "Profit address",
    nodeAddress: "Node address",
    storagenodeAddress: "Storage node address",
    contractAddress: "Contract address",
    diagram: "Diagram",
    copy: "Copy",
    QRcode: "QR code",
  },

  transferpath: {
    title: "Transfer Path Analysis",
    sourceaddress: "Source Address",
    destinationaddress: "Destination Address",
    blocknumber: "Block",
    tranTotal: "Transfer {0}",
    days: "Days",
    selday1: "last 1 day",
    selday2: "Last 1 week",
    selday3: "Last half month",
    selday4: "Last 1 month",
    selday5: "Last 3 months",
    selday6: "Last half year",
    selday7: "Last 1 year",
    selday8: "custom days",
  },

  accountdetail: {
    info: "Account Information",
    Overview: "Overview",
    MoreInfo: "More Info",
    ugtValue: "UTG Value",
    Balance: "Balance",
    Token: "Token",
    Mined: "Mined",
    tokenHoldings: "Token Holdings",
    searchToken: "Search for token name",
    tokens: "Tokens",
    //toeknTransfers:"Token Transfers({0})"
    toeknTransfers: "{0} Token Txns"
  },

  node: {
    nodeManage: "Ultron Node",
    storagenodetitle: "Storage Node",
    nodeList: "Node List",
    //candidateNode: "Pre-Candidate Node",
    candidateNode: "Candidate Node",
    witnessNode: "Ultron node",
    signoutNode: "Exited node",
    storageNode: "Storage node",
    storageNodeaddr: "Storage Node Address",
    order: "Rank",
    nodeAddress: "Node",
    nodetype: "Node Type",
    pledgeAmount: "Pledge Amount",
    unlockAmount: "Wait Released Amount",
    punishScore: "penalty points",
    pledgeTime: "Stake-in Time",
    nodeSearch: "Search Node Address",
    pledgeAddressSearch: "Search Pledge Address",
    nodeSignoutSearch: "Search Exited Node Address",
    nodeWitnessSearch: "Search Ultron Node Address",
    nodeStorageSearch: "Search Storage Node Address",
    operation: "Operation",
    currentCandidateNumber: "Total {0} Candidate Node",
    currentWitnessNumber: "Total {0} Ultron Node",
    currentSignoutNumber: "Total {0} Exited Node",
    currentStorageNumber: "Total {0} Storage Node",
    recharge: "Recharge",
    repairPayment: "Supplementary Payment",
    //punishRepairPayment: "Penalty Score Payment",
    punishRepairPayment: "Penalty Score Pay",
    punishRecharge: "Penalty Point Recharge",
    RechargeCreditScore: "Recharge Credit Score",
    estimatedPayment: "Estimated Payment",
    rechargeRecord: "Recharge Record",
    rechargeAddress: "Recharge Address",
    valueUTG: "Value UTG",
    rechargeTime: "Recharge Time",
    rechargeHeight: "Block",
    nodepledge: "Node Pledge",
    pledge: "Pledge",
    trustpledge: "Delegate",//Trust Pledge
    nodetrustpledge: "Node Delegate",//Node Trust Pledge
    address: "Node Address",
    pledgerecord: "Pledge Record",
    pledgeReward: "Pledge Reward",
    serialnumber: "Order Number",
    blockNumber: "Block",
    pledgetime: "Stake-in Time",
    pledgeaddress: "Pledge Address",
    pledgeahash: "Pledge Hash",
    pledgeNumber: "Pledge height",
    pledgeamounte: "Pledge amount",
    pledgestatus: "Pledge status",
    exitpledgeheight: "Exit pledge height",
    exitpledgetype: "Exit pledge type",
    Lastpledgetime: "Last Stake-in Time",
    nodeDetails: "Block Miner",
    activeheight: "Active Height",
    manageaddress: "Admin Address",
    chargerate: "Pool Fee",
    unknownType: "--",
    plestatus: "All",
    revenuesaddress: "Reward Address",
    plestatus0: "Exit Pledge",
    plestatus1: "Pledging",
    exit_type: "Exit type",
    shareradio: "share",
    exitpledgetype0: "Normal exit",
    exitpledgetype1: "Auto exit",
    exitpledgetype2: "Manual exit",

    currentNumber: "Total {0} records",
    delegatemanage: "Delegate management",
    btnTitle: "Exit Pledge",
    signouttrustplegde: "Exited Entrust Pledge",

    ratedescribe: "The service fee charged by the ultron node for block rewards, also known as the rate/commission rate. Each time rewards are issued, the commission will be deposited into the Reward Address of the Ultron node, and the remaining rewards will be distributed according to the pledge ratio of each delegated address.",
  },

  ultronnodereward: {
    title: "Ultron Node Reward",
    nodeaddressSearch: "Search Node address",
    totalnumber: "There are currently {0} data",
    nodeaddress: "Node Address",
    nodetype: "Node Type",
    pledgeAmount: "Pledge Amount",
    reward: "Reward",
    lockAmount: "Lock Amount",
    releaseamount: "Release Amount",
  },

  market: {
    title: "Storage Market",
    pledgetitle: "Storage Server Node",
    pledgeexittitle: "Storage service node Unstake",
    totalnumber: "There are currently {0} data",
    address: "Address",
    marketSearch: "Search Node address",
    SearchAddress: "Search Node or Reward Address",
    deviceaddress: "Node address",
    pledgeaddress: "Pledge address",
    time: "Time",
    totalspace: "Total space",
    remainingspace: "Remaining Capacity",
    availablespace: "Rentable space",
    rentedspace: "Rented space",
    pledgeamount: "Pledge amount",
    reparationamount: "reparation amount",
    pledgeheight: "Pledge height",
    pledgestatus: "Pledge status",
    pledgetime: "Pledge time",
    timespace24h: "SpaceTime verify(24h)",
    timespacecur: "SpaceTime verify(Current)",
    vaildStatus: "SpaceTime verify",
    verifying: "Verifying",
    vaildTime: "Verification Time",
    rentalprice: "Rental Price",
    price: "Price",
    tenantquantity: "Tenant quantity",
    status: "Status",
    totalrevenue: "Total revenue",
    posrrevenue: "Grant Revenue",
    rentalrevenue: "Service Revenue",
    storagespacebenefits: "Storage space revenue",
    grossrentalincome: "Gross rental income",
    lastverificationblock: "last verification block",
    lastverifiedblock: "last verified block",
    Lastwarehousingtime: "Last warehousing time",
    lastupdatetime: "Last update time ",
    //revenuesaddress: "revenues address",
    revenuesaddress: "Reward address",
    storagefactor: "Storage factor",
    //bandwidth: "Uplink Bandwidth",
    bandwidth: "Upload bandwidth",
    bandwidthfactor: "Bandwidth factor",
    rewardRatio: "Bandwidth reward factor",
    collecttime: "collect time",
    operation: "Operation",
    hire: "Rent",
    awaitpledge: "Pledge to be replenished",

    awaitpledgemsg1: "According to the calculation results of space-time proof in the latest month, there is an anomaly that the effective uplink bandwidth value of the node does not match the declared uplink bandwidth value of the node,",
    awaitpledgemsg2: "Please be sure to adjust the declared uplink bandwidth value according to the uplink bandwidth tested by Speedtest or 80% of the uplink bandwidth provided by the broadband operator of the node within 7 days,",
    awaitpledgemsg3: "Otherwise, the overflow unlocked reward of this node will enter the destruction address after unlocking.",

    nodeeixtmsg: "You are exiting Grant and Service, and you will not be able to contribute storage space after exiting! If you want to participate in Grant and Service again after exiting, you need to RE-SEAL the storage space！Please confirm whether you want to exit!",
    /*
    status0: "wait pledge",
    status1: "pledged",
    status2: "pledge failed",
    status3: "exit pledge",
*/
    status0: "activated",
    status1: "Pledge withdrawal",
    status5: "Removing",
    status6: "Deleted",
    status7: "inactive",
    'status-1': "Pledge failed",
    status: "All",
    status8: "SpaceTime verify success",
    status9: "SpaceTime verify failed",

    marketdetail: "Storage Server Node Details",
    rentalrecord: "Rental Record",
    //posrprooftran: "Time Space Proof Verify Record",
    posrprooftran: "Time Space Proof Verify",
    storagereward: "Grant Reward",//Storage reward
    rentalreward: "Service Reward",//Rental Reward
    burntdetail: "Burnt Detail",
    curentday: "today",
    yesterday: "yesterday",
    byesterday: "the day before yesterday",
    days: "days",

    storagerelease: "Reward Release",
    type: "type",

    imagecannot: "The image size cannot exceed {0}KB",
    savingSucceeded: "Saving succeeded",
    uploadLink: "Upload link",
    clickUpload: "Click Upload",
    linkAddress: "Link Address",
    requestSignature: "Request signature",
    noLink: "No link configured!",
    configure: "Configure"
  },

  storagespace: {
    title: "Storage Space",
    totalnumber: "There are currently {0} data",
    revenuesaddress: "Reward Address",
    deviceaddress: "Storage server address",
    totalspace: "Storage space",
    availablespace: "Available space",
    storagefactor: "Storage factor",
    collecttime: "collect time",
  },

  rPassword: {
    return: "Return",
    newPassword: "Password",
    confirmPassword: "Confirm password",
    confirmModification: "Save",
    twopassword: "The two passwords are inconsistent",
    connectedServer: "Server Address",
    modifyPassword: "Change Password",

  },
  storagereward: {
    title: "Revenue Address Reward",//"Storage Server Node Reward",
    totalnumber: "There are currently {0} data",
    currentTotal: "Total {0} data,Reward: {1} Release: {2}",
    revenuesaddress: "Reward Address",
    deviceaddress: "Storage server address",
    totalspace: "Storage space",
    storagefactor: "Storage factor",
    collecttime: "Collect time",
    rewardtype: "Reward type",
    blockNumber: "Block",
    totalAmount: "Lock Amount",
    leftAmount: "Release Amount",
    unlocktime: "Release Time",
    reward: "Reward",
    rewardtitle: "Revenue Address Reward details",//Reward details
    detailtitle: "Storage reward distribution records",
    addressSearch: "Search Revenue Address",
    deviceaddressSearch: "Search Storage Server Address",
    type1: "Block Lock ",
    type2: "block release",

    //type1: "Grant Reward Lock ",
    // type2: "Grant Reward release",

    type3: "Node Exit Pledge Lock",
    type4: "Node Exit Pledge release",
    type5: "Service Reward Lock", // "Rental Reward Lock",
    type6: "Service Reward Release", //"Rental Reward Release",
    type7: "Miner Lock",
    type8: "Miner Release",
    type9: "Grant Reward Lock", // "Storage Reward Lock",
    type10: "Grant Reward Release", //"Storage Reward Release",
    type11: "SN Entrusting pledge Lock",
    type12: "Storage Space Rewards",
    type13: "Lease Reward",
    type14: "Pledge Lock",
    type14: "Lock Release",
    type17: "Storage Exit Pledge Lock",
    type18: "Storage Exit Pledge Release",
    type21: "SP Reward Lock",
    type23: "SP Entrusting pledge Lock",

    BlockRewards: "Block Rewards",
    Storagespacerewards: "Grant Reward Details",//"Storage Reward Details",
    Leasereward: "Service Reward Details",//Lease reward
    storagepledgelock: "Storage Pledge lock",
    Lockrelease: "Lock release",

    posrreward: "Grant reward",
    rentalreward: "Service reward",
    totalBurnt: "Total Burnt",
    posrBurnt: "Grant Burnt",
    rentalBurnt: "Service Burnt",
  },

  storagerental: {
    title: "Storage Rental ",
    relievetitle: "Storage Rental Cancellation",
    renewaltitle: "Storage Lease Renewal",
    totalnumber: "There are currently {0} data ",
    searchAddress: "Search Storage Server address",
    searchHashAddress: "Search Storage Server address or Rental hash",
    address: "Address",
    rentspace: "rent space",
    rentalamount: "rental amount",
    rentaltime: "rental time",
    status: "Status",
    revenuesaddress: "Reward Address",
    deviceaddress: "Storage Server address",
    pledgeaddress: "pledge address",
    pledgeamount: "pledge amount",
    renthash: "rent hash",
    rentaladdress: "rental address",
    rentalprice: "rental price",
    rentalduration: "rental duration",
    renewaltime: "renewal time",
    totalrent: "total rent",
    blockheight: "block height",
    leasestatus: "rent status",
    timeunit: "Day",
    priceunit: "SRT/GB·Day",
    lavetime: "time left",
    applytime: "apply time",
    operation: "Operation",
    renewal: "Renewal",
    stoprenewal: "Terminate",

    /*
    status0: "Rental application in progress",
    status1: "Renting",
    status2: "Rent failed",
    status3: "Rent ends",
    status4: "Termination",
    status5: "Cancelled ",
    status6: "Deleted",
*/
    status0: "Not pledged",
    status1: "normal",
    status2: "Cancelling the contract",
    status3: "waiting for recycling",
    status4: "Default",
    status5: "Cancelled",
    status6: "Contract expired",
    status7: "Leasing failed",
    status8: "request expired",
    status: "All",

    rulespace: "rented space cannot be empty",
    ruleprice: "rental price cannot be empty",
    ruletime: "rented duration cannot be empty",
    ruleaddr: "storage server address cannot be empty",
    rulerenewaltime: "renewal time cannot be empty",
    inputeinfo: "Please enter a positive integer",
    datailtitle: "Storage Lease Details",

    storagerequest: "Request list",
    reqtype: "request type",
    reqstatus: "request status",
    reqnumber: "request number",
    reqstatus0: "failed",
    reqstatus1: "success",
    reqstatus2: "pending",
    reqstatus3: "request expired",
    reqtype1: "rental request",
    reqtype2: "renewal request",
    reqtype3: "termination request",
    reqtype4: "rental pledge request",
    reqtype5: "renewal pledge request",
    reqtype6: "storage pledge request",

    leasedspace: "Rental space at least {0}GB,and is a multiple of 5GB unit: GB",
    rltimeunits: "Rental duration at least {0}days, unit: days",

    rentalconfig: "configure",
    rentalconfigmd: "Modify configure",
    rentalconfignw: "New configure",
    rentalcfgtitle: "Renewal Configure",
    rentalpic: "Image",
    rentalcontent: "Relevance content",
    revenueaddress: "Revenue address",
    picsizemsg: "Only jpg/png files can be uploaded, and cannot exceed 2k",
    uploadpicfilemsg: "Uploading icon files can only be in jpg/png format",
    uploadpicsizemsg: "The size of the upload icon file cannot exceed 2k"
  },

  storagepledge: {
    title: "Storage Rental Pledge ",
    renttitle: "Storage Rental",
    totalnumber: "There are currently {0} data",
    searchAddress: "Search Storage Server address",
    totalspace: "Total Space",
    remainingspace: "Remaining Space",
    pledgeamount: "Pledge Amount",
    pledgetime: "Pledge Time",
    pledgestatus: "pledge status",
    deviceaddress: "storage server address",
    pledgeaddress: "pledge address",
    revenuesaddress: "revenues address",
    renthash: "rent hash",
    rentaladdress: "rental address",
    rentspace: "rent space",
    rentalprice: "rental price",
    rentalduration: "rental duration",
    totalrent: "total rent",
    blockheight: "block height",
    renttype: "rent type",
    operation: "Operation",
    manage: "Manage",
    pledge: "Pledge",

    status0: "normal",
    status1: "Pledge withdrawal",
    status5: "Removing (7 days verification failed)",
    status6: "Deleted",
    status7: "Pledge failed",

    vaildStatus0: "Success",
    vaildStatus1: "Not verified",
    vaildStatus2: "Failed",

    vaild24Status0: "Failed",
    vaild24Status1: "Success",
    vaild24Status2: "", //-1

    renttype0: "Lease",
    renttype1: "Renewal",

    exitinfo1: "Are you sure to exit",
    exitinfo2: "There is a lease. If you withdraw the lease in advance, you will be treated as a breach of the lease. Do you want to withdraw?",
  },

  rewardscalculator: {
    title: "Calculate Your Service Profit",
    curpotsradio: "Current Service Conversion Ratio(GB/UTG)",
    utgprice: "UTG Price(USDT/UTG)",
    rentedspace: "Rented Space",
    rentalprice: "Rental Price",
    rentaltime: "Rental Time",
    bandwidthrewardRatio: "Bandwidth Reward Factor",
    storagerewardRatio: "Storage Reward Factor",

    paysrt: "Paid SRT",
    destroyedutg: "Burnt UTG",
    contractualpledgeutg: "Contractual pledge",
    potsrewards: "Service Rewards",
    returnroi: "Return (ROI)",
    investment: "investment",
    produce: "produce",
    converted: "Converted",
    calculator: "Calculate",
    reset: "Reset",
    rentedspacemsg: "Rented space(GB): Greater than or equal to {0} GB",
    rentaltimemsg: "Rental duration(days):Greater than or equal to {0} days",
    bandwidthrewardmsg: "Bandwidth reward factor: Greater than or equal to {0}, Less than or equal to {1}",
    storagerewardmsg: "Storage reward factor: Greater than or equal to {0}, Less than or equal to {1} (please query the storage coefficient of the revenue address bound to the storage server)",
    titlemsg: "This calculator will display your expected earnings in UTG. The calculations are based on assumptions with the same set-up conditions. The calculations are based on the assumption that all conditions remain as they are below.",
  },
  mymanage: {
    minermanage: "Miner Manage",
    minerlist: "Miner List",
    address: "Address",
    paylog: "Paylog",
    my: "My",
    overview: "Overview",

    BlockMiner: "Block Miner",
    TrafficMiner: "Storage Node",
    storagemanage: "Storage",
    nodemanagement: "Ultron Node ",
    BandwidthReward: "Storage Reward",

    producedBlock: "Produced Block",
    blockreward: "Block Reward",

    //minersmanagement: "Mining Management",
    minersmanagement: "Storage Node",

    releaserecord: "Release Record",

    miningrecords: "Mining Records",
    rechargerecord: "Recharge Record",
    notconnectedwallet: "You have not connected the wallet",
    connecttowallet: "Connect to a wallet",
    loginaddress: "The Login Address",
    utgamount: "UTG AMOUNT",
    numberofminers: "Miners",
    lastloginint: "Last_login",
    nodenumber: "Nodes",
    theremaining: "Remaining SRT",
    pay: "Exchange",
    estimate: "Estimate",
    payfulnum: "Convert SRT",
    utgnumber: "UTG number",
    trans_hash: "Transaction Hash",
    TxnFee: "Txn Fee",
    payaddress: "Convert address",
    revenuesaddress: "revenues address",
    payTime: "Time",
    payrecord: "Record",
    age: "Age",
    blockheight: "Block",
    transformaddr:
      "The wallet user has been switched. Whether to switch the search address at the same time ?",
    walletswitch: "Wallet User switch",
    miner: "Miner",
    node: "Node",
    earnings: "Earnings",
    balance: "Balance",
    tradingrecord: "Trading Record",
    time: "Time",
    amount: "Amount(UTG)",
    change: "Change(UTG)",

    blockTotalutg: "Total {0} UTG from block rewards",
    storageTotalutg: "Total {0} UTG from storage resource rewards",

    bdtotalamount: "Storage Reward",
    bdreleaseamount: "Storage Freed",

    blocktotalamount: "Block lock",
    blockreleaseamount: "Block Freed",

  },
  mymanageNode: {
    node: "Node",
    nodeType: "Node type",
    pledgenum: "Pledge Amount",
    punilshamount: "Penalty points",
    makegood: "Penalty Score Payment",
    quit: "Exit the Pledge",
    estimate: "Estimate",
    pay: "Pay",
    payrecord: "Pay Record",
    payaddress: "Address",
    paynumber: "Number",
    utgnumber: "UTG number",
    paytime: "Time",
    payheight: "Block",
    //candidateNode: "Pre-Candidate Node",
    candidateNode: "Candidate Node",
    witnessNode: "Ultron node",
    pledgeNode: "Pledge Node",
    pledge: "Pledge",
    pledgetime: "Pledge time",
    pledgeheight: "Block",
    pledgelog: "Pledge Log",
    punishmentlog: " Credit Score Recharge Log",
    penaltyscorelog: "Penalty Score after payment Log",
    SetFeerate: "Set Charge rate",
    chargerate: "Charge rate",
    chargeunit: "%"
  },
  mymanageMining: {
    miner: "Miner",
    mineraddr: "Miner Address",
    revenueaddress: "Revenue Address",
    pledgeamount: "Pledge Amount",
    bandwidth: "Storage",
    minermode: "Mode",
    minerstatus: "Status",
    revenueamount: "Revenue Amount",
    bandwidthlog: "Bandwidth log",
    adjustbandwidth: "Adjust Storage ",
    adjustbandwidths: "Adjust Storage to",
    nowbandwidth: "Current Storage",
    havejoined: "Joined",
    nottojoin: "Unjoined",
    allege: "Storage Allege",
    quit: "Quit",
    join: "Join",
    time: "Time",
    submit: "Submit",
    miningparticulars: "Mining Details",
    jointime: "Join Time",
    freed: "Freed Amount",
    lockamount: "Locked Amount",
    payearnings: "Pay/Earnings Address",
    expendful: "Expend Amount SRT",
    miningearnings: "Mining Earnings",
    waitingextracting: "Waiting for Extracting",
    theremaining: "Remaining SRT",
    miningpool: "Mining Pool",
    add: "Add",
    alreadyexits: "Already Exits",
    waitingmining: "Waiting for Mining",
    mining: "Mining",
    storagemining: "Mining",
    bandwidthmining: "Storage Mining",
    revenuesaddress: "Reward Address",
    pleasetoyaddr: "Please switch the wallet to the original revenue address",
    dotoaddr: "Do not use the original revenue address",
    transferaddress: "Transfer Revenue Address",
    originaladdress: "Original Revenue Address",
    newaddress: "New Revenue Address",
    transfer: "Transfer",
    addminers: "New Miners",
    pleasetoytrustaddr: "Please switch the wallet to the original entrust address",
    pleasetoymangeaddr: "Please switch the wallet to the original management address",
    pleaseSNAddr:"Please switch the wallet to the node address",
  },
  mininglog: {
    payearnings: "Pay/Earnings Address",
    expendful: "Expend SRT",
    minersNumber: "Miners",
    payfulnum: "Convert SRT",
    theremaining: "Remaining SRT",
    miningearnings: "Mining Earnings",
    unlockedquantity: "Accumulate Unlocked",
    day: "Day",
    unlocktime: "Unlock Time",
    earnings: "Earnings",
    locknumber: "Accumulate Lock",
    bandwidth: "Storage",
    storage: "Storage",
    oreremoval: "Ore Removal Time",
    blockNumber: "Block",
  },

  storagemining: {
    minerx: "Miner",
    mining: "Node",
    miner: "Storage Node",
    storagemining: "Storage Mining",
    currentlyminer: "There is currently {0} node",
    bandwidth: "Storage",
    pledgequantity: "Pledge Quantity",
    generatedtraffic: "Generated Traffic",
    remainingfull: "Remaining SRT",
    totalrevenue: "Total Revenue",
    lockquantity: "Lock Quantity",
    releasedquantity: "Released Quantity",
    extracted: "Extracted",
    jointime: "Join time",
    name: "Miner({0}) --> Ore pool --> Revenue Address( ",
    minersearch: "Search Mining Address",
    minerview: "Mining Details",
    minerSearch: "Select Time",
    order: "Serial Number",
    Minersaddress: "Storage Address",
    time: "Time",
    miningstorage: "Mining Storage",
    consumeful: "Consume SRT",
    revenueaddress: "Revenue Address",
    miningquantity: "Mining Quantity",
    lastminingtime: "Last Mining Time",
    bandwidthmbps: "Storage",
    currentlystoragemining: "There are currently {0} traffic mining records",
    storageminingsearch: "Search mining address",
    trans_hash: "Transaction Hash",
    report_time: "Date",
    storage_value: "Storage Value",
    fulnum: "Consume SRT",
    profitamount: "Mining Income",
    instime: "Time",
    flmining: "Mining",
    miningview: "Traffic Transaction",
    en_address: "Miner's Address",
    router_ipaddr: "Routing Node Wallet Address",
    from_addr: "Client Additional Information",
    to_addr: "EN Node Additional Information",
    minerstatus: "Status",
    miningearnings: "Earnings",
    storageDetails: "Storage Node Details",
    storagerewardDetails: "Storage Node Reward Details",
    blockNumber: "Block",
    freedTime: "Freed Time",
    revenuequantity: "Revenue Quantity",
    lockrevenueaddress: "Lock Revenue Address",
    txHash: "TxHash",
    storagereward: "Reward Lock",
    storagerelease: "Reward Release",
  },

  coins: {
    create: "Create",
    title: "One-click Currency Issuance",
    name: "Token Name",
    abbreviation: "Token Abbreviation",
    number: "Total Issuance",
    decimal: "Decimal Places",
    address: "Contract Management Address",
    intro: "Token Introduction",
    next: "Next Step",
    myToken: "My Token",
    currentToken: "Total {0} Token contract",
    tokenAbbreviation: "Abbreviation",
    status: "Status",
    remarks: "Remarks",
    operate: "Operation",
    error: "Fail",
    detail: "Details",
    retry: "Retry",
    sureRetry: "Please confirm whether you want to redeploy?",
    sure: "Confirm",
    sureTitle: "Redeployment",
    type: "Token Type",
    reminderTitle: "Reminder",
    reminderContent:
      "In order to maintain the stability of UTG blockchain network, please first bind the address and use the wallet to pay for it before you can issue money with one button. If the transfer payment is not made through the binding payment address or the transfer quantity does not meet the requirements, the loss caused by it shall be borne by the user.",
    collectionMessage: "Payee Information",
    collectionAddress: "Payee Address",
    paymentMessage: "Payer information",
    paymentAddress: "Payer Address",
    modify: "Modify",
    payNumber: "Payment Quantity",
    confirm: "Confirm",
    payConfirm: "Payment confirmation, please wait",
    payConfirmLabel:
      "We are confirming whether the following address and quantity have arrived. Please wait patiently",
    paySuccess: "Congratulations, successfully issued!",
    manageAddress: "Contract Management Address",
    view: "Go To Check",
    check: "check",
    bindAddress: "Please bind the payment address",
    bind: "Bind Address",
    release: "Confirm Release",
    success: "Success!",
  },

  validate: {
    coinType: "Token type cannot be empty",
    circulationTotal: "Total issuance cannot be empty",
    coinCode: "Token short name cannot be empty",
    coinName: "Token name cannot be empty",
    contractManageAddress: "Contract management address cannot be empty",
    description: "Token introduction cannot be empty",
    keepDecimal: "Decimal place cannot be empty",
    username: "User account cannot be empty",
    password: "Please enter a 6-20 digit password",
    email: "E-mail can not be empty",
    captcha: "Graphic calculation results cannot be empty",
    emailCode: "Email Ultron code cannot be empty",
    confirmPassword: "Password entered again cannot be empty",
    payAddress: "Payment address cannot be empty",
  },

  loadingSubPan: {
    state: "State",
    loading: "Trading in Progress",
    finish: "Finish",
    failure: "Failure",
    close: "Close Window",
    ok: "ok",
    Hasbeenused: "Has Been Used",
    pleaseConfirm: "Please confirm!",
  },

  pledge: {
    successfultest: "Successful Test",
    pledge: "Pledge",
    allege: "Storage Allege",
    bandwidthpledge: "Storage Pledge",
    jump: "Jump",
    operator: "Operator",
    mineraddr: "Miner Address",
    andwidthtest: "Storage Test",
  },

  binding: {
    automatically: "Automatically",
    privatekey: "Miner Private Key",
    minerurl: "Miner Url",
    bindaddr: "Bind Revenue Address",
    upkey: "Upload the Private Key",
  },

  ftable: {
    order: "#",
    totalnumber: "Total {0}",
    action: "Operation",//Action
    totalnumberrelease: "Total {0} release records",
    searchAddress: "Search by Address",
    totalnumberproduced: "Total {0} block produced",
    totalnumbertraffic: "Total {0} Storage Miner",
    releaserecord: "Release Records",
    all: "All"
  },
  table: {
    add: "Add",
    operation: "Operation",
    confirm: "Confirm",
    cancel: "Cancel",
    exchange: "Exchange",
    convert: "Convert",
    days: " Day",

    show: "Show",
    first: "First",
    records: "Records",
    last: "Last",
    total: "There is {0} data in total"
  },
  utilsmsg: {
    copyok: "Copy OK",
  },
  messages: {
    addresslocked: "The address is locked and cannot be pledged",
    addressused: "The revenue address has been used!",
    greaterZero: "The input value must be greater than zero",
    pleaseaddress: "Please enter the correct wallet address",
    norepeatedpledge: "No repeated pledge",
    pledgedadrnoaccout: "The miner's address cannot be pledged for itself (the management address cannot be the miner's address)",
    mineraddressnotplege: "Miner address cannot be pledged for POS node",
    pledgeaddressused: "The entrusted address has been pledged to a POS node!",
    posaddressnopledge: "This address is a POS node address and cannot be used as a pledge for other POS nodes!",
    mangeaddressnopledge: "This management address has been pledged to a POS node!",
    mangeaddressPosnode: "This address is a management address and cannot be pledged as a POS node!",
    delegateaddressused: "This address is a entrusted pledge address and cannot be pledged as a POS node!",
    delegateaddressmanage: "This address is a entrusted pledge address and cannot be used as a management address!",
    mangeaddressDelegate: "This pledge address is a management address and cannot be used as a entrusted pledge address!",
    required: "Required",
    confirm: "Confirm",
    cancel: "Cancel",
    notkey: "Please enter the correct private key",
    copy: "Copy",
    mnemonic: "Mnemonic",
    privatekey: "Private Key",
    wallet: "Wallet",
    newwallet: "New Wallet",
    closewindowbefore:
      "Before closing the window, you need to back up the mnemonic",
    notnetworkinkey: "Browsers don't store your mnemonics and private keys",
    notnetwokin:
      "Do not disclose the mnemonic to anyone, and do not save it on the Internet",
    bearinmind: "Bear in Mind",
    clickcopy: "Click to Copy",
    pleaserevenue: "Please enter the correct revenue address",
    pleaseminer: "Please switch the wallet user to the miner address",
    binding: "Binding",
    unbinding: "UnBinding",
    jump: "Jump",
    jumppledgetext: "Have you completed binding, confirm to skip pledge?",
    exitpledgetext: "Do you want to exit the pledge?",
    exitAllpledgetext: "Do you want to completely exit the pledge?",
    search: "Search",
    pledgok: "Successful Pledge",
    rentgok: "Successful rented",
    rescindgok: "Successful Rescind",
    setfeerateok: "Successful Set",
    copykey: "Copy Privatekey",
    minerprivatekey: "The wallet private key for the miner's address",
    newaddress: "The new address",
    joinsuccess: "Join the success!",
    notifypool: "Notify the ore pool",
    requestbinding: "Request the binding",
    getcontract: "To get the contract",
    randomnumber: "Get random number",
    bindingsignature: "Binding signature",
    signature: "Signature",
    pleaseconfirm: "Please Confirm !",
    confirmed: "Confirmed. It may take some time to wait for results",
    //bindinglift: "Binding to lift",
    bindinglift: "Unbind",
    pledelift: "Unstake",
    pledexitgok: "Successful Unstake the pledge",
    pleasebrowser: "Please open it using your browser",
    pleasesupload:
      "Please save your private key and upload it to the mining machine",
    inputvaluemin: "Can not be less than the current stored value ",
    rentPrice:
      "The rental unit price cannot be less than the basic rental unit price",
    rentmPrice:
      "The rental unit price cannot be greater than 10 times the basic rental unit price",
    rentSpace:
      "The leased capacity cannot be larger than the available space of the staking address",
    rentSRT: "User does not have enough SRT to perform rental fee",
    rentTime:
      "When the remaining lease is more than {0}% of the contract period, it cannot be renewed",
    rentAddr:
      "You can only renew leases initiated by yourself (lease. leaseholder address == transaction origination address) ",

    rentFailTime:
      "The total verification failure time is less than 10% of the contract period and the contract cannot be cancelled",
    rentRelieveAddr:
      "You can only cancel the lease initiated by yourself (leaseholder address == transaction initiation address )",
    timeMultiple:
      "The renewal duration should be a multiple of the current contract duration",
    rtspaceMultiple: "The rental capacity shall be a multiple of 5GB",
    rttimespace:
      "The rental duration or rental capacity shall not be less than or equal to zero",
    rentalperiod: "The rental period shall not be less than {0} days",
    rentalmaxperiod: "The rental period cannot be greater than {0} days",
    renewalperiod: "The renewal period shall not be greater than {0} days",
    leasedspace: "The rental space must be greater than or equal to 1025gb",

    pledgeAddr:
      "The current account address is not the storage service node address",
    exchSRT: "the user does not have enough balance(UTG) to exchange for SRT",

    walletbalance: "Insufficient user wallet balance (UTG)",

    responsecommon: "query exception, please try again later!",
    responsetimeout:
      "the server response timed out, please refresh the current page!",

    pleaserevenues: "Please enter the correct revenue address",
    pleaserevenueaccount: "Please bind the revenue account first",
    pleaseDevOrRevenue: "Please switch wallet account to revenue account or server address",
    pleaseManageAddr: "Please switch the wallet user to the administrative address!",
    invalidWalletAddress: "Invalid wallet address",
    notPledgeAddr:"The current wallet address cannot be pledged on this node!"

  },
  additions: {
    miningpledge: "Mining pledge",
    actualbandwidth: "Actual storage",
    interval: "Interval",
    freedupstage: "Freed up stage",
    lockupstage: "Lock up stage",
    exchangeratio: "SRT Convert Ratio",
    pledgeutg: "Pledge UTG",
    pledgeype: "Pledge Type",
    deviceatype: "Device Type",
    multisignature: "Multisignature Address",
    contractaddress: "Contract Address",
    revenuetype: "Revenue Type",
    deviceaddress: "Device Address",
    fuladdr: "SRT Collection Address",
    fulnumber: "SRT Number",
    storagepledge: "Storage Pledge",
    blockpledge: "Block Pledge",

    calpledgeamount: "pledge amount calculation coefficient",
    leaserequesttime: "lease request expiration time",
    minleaseduration: "minimum lease duration",
    rentalbaseprice: "rent base price",

    exchratevalue: "Exchange specific value SRT/UTG",

    lockduration: "Lock duration",
    releaseduration: "Release duration",
    releaseinterval: "Release interval",
    exchaddress: "address",
    exchutg: "UTG",
    exchsrt: "SRT",
    dstsettype: "Type",
    stsetvalue: "Value",
    deviceaddress: "Device address",
    status: "Status",
    status1: "success",
    status2: "failed",
    storagespace: "Storage space",
    rentalprice: "Rental price SRT/day",
    pledgeamount: "Pledge amount",
    rentedspace: "Rented space",
    rentalhash: "Lease hash",
    rentalduration: "Rental duration",
    renewalduration: "Renewal duration",
    bytes: "bytes",
    totalpaidpledgeamount: "Total paid pledge amount",

    nodeaddress: "Node address",
  },

  charts: {
    totalstoragechart: "Whole network storage space Trend",
    growth: "Daily storage growth",//"Growth",
    totalstorage: "Total Storage",
    totalrent: "Total Rental",
    increrent: "Daily Rental growth",
  },
  contract: {
    contract: "Contract",
    mycontract: "My contract",
    contractManagement: "Contract management",
    myPermissions: "My permissions",
    transferAddress: "Transfer address",
    authorizedAmount: "Authorized amount",
    addAuthorized: "Add authorized amount",
    estimate: "Estimate",
    firstadministrator: "First level administrator",
    Transferadministrator: "Transfer administrator",
    Secondaryadministrator: "Secondary administrator",
    Transfersecondary: "Transfer secondary administrator",
    contractList: "Contract list",
    lockHeight: "Lock height",
    extractRecord: "Extract record",
    userAddress: "User address",
    contractAddress: "Contract address",
    amountIssued: "Amount provide",
    withdrawalAmount: "Withdrawal amount",
    withdrawableAmount: "Withdrawable amount",
    withdrawMoney: "Withdraw money",
    provide: "Provide",
    takeBack: "Retraction",
    receivingAddress: "Receiving address",
    RetractedHeight: "Retracted height",
    retractedAmount: "Retracted amount ",
    notPermission: "You do not have permission",
    contractBalance: "Contract Balance",
    authorizedAmount: "Authorized amount",
    valgtl: "Must be greater than {0}",
    permissions: "Permissions",
    withdrawalAuthorization: "Withdrawal of authorization",
    administrators: "Administrators",
    amountWithdrawn: "Amount Withdrawn",
    lockStart: "Lock start height",
    releaseTimes: "Release t=Times",
    extractAccount: "Extract Account",
  },
  storageNode: {
    adminAddress: "Admin Address",
    storagePool: "Storage Pool",
    JoinBlock: "SP Join Block",
    SPrate: "SP Commission",
    rewardEntrustedRatio: "Reward Entrusted Ratio",
    pledgeRecord: "Pledge Record",
    pledgeReward: "Pledge Reward",
    pledgeReward: "Pledge Reward",
    trustpledge: "Delegate",
    pledgedAnTotal: "Pledged / Total",
    status: "Status",
    pledgeAddressSearch: "Pledge address search",
    reward: "Reward",
    release: "Release",
    pledge_total:"Pledged / Total",
    select:"Select",
    selectSP:"Select SP",
    exitSP:"Exit SP",
    setSP:"Setting SP",
    nodeAddress:"Node Address",
    SNRewardRatio:"SN Reward Distribution Ratio"
  },
  storagePool: {
    storagePoolAddress:"Storage Pool Address",
    searchMsg:"Search the storage pool address/lock-in address",
    searchMsg2:"Storage pool address/Admin address/Reward address",
    searchMsg3:"Storage pool address/Reward address",
    SPRewardRatio:"SP Reward Distribution Ratio",
    rate:"SP Commission",
    commission:"SP Commission",
    total:"Total Reward",
    nodeNumber:"SN Number",
    usedSpace:"Access Space",
    maxSpace:"Upper space limit",
    maxStorage:"Upper space limit", 
    TotalAmountPledged:"Total pledged",
    activeStatus:"Status",
    createHeight:"Create Height",
    createTime:"Create Time",
    revenuesaddress: "Reward Address",
    SPAdminAddress:"Admin Address",
    createSP:"Create SP",
    locked:"Locked",
    entrustReward: "Entrust Reward",
    SPreward: "SP Reward",
    settingHeight: "Block Number",
    settingTime: "Time",
    txHash: "hash",
    removeSN: "SN Remove",
    SNnode: "SN",
    addHeight: "Block Number",
    addTime: "Time",
    joined: "Joined",
    remove: "Remove",
    SNofSP: "SN of the storage pool",
    spaceRate: "Space Rate",
    spaceUsage: "Space Usage",
    releaseAmount: "Release Amount",
    lockAmount: "Lock Amount",
    freeSpace: "Free Space",
    activeHeight: "Block Number",
    adminAddress: "Admin Address",
    SPCommission: "SP Commission",
    SPRewardDistributionRatio: "Reward Distribution Ratio",
    activeTime: "Active Time",
    storagePoolDetails: "SP Details",
    setupRecord: "Setup Record",
    ratioMessage: "Note: The reward ratio is 0, which means that the reward is not distributed to the principal",
    setRate: "Set Commission",
    rateSettingRecord: "Commission Setting Record",
    ratesMessage: "Note: The Commission is 0, that is, there is no processing charge for SN",
    pledge: "Pledge",
    amountPledged:"Pledge Amount",
    pledgedAmount:"Pledged",
    remainingPledges:"Remaining Pledges",
    
    poolNodeManagement:"Storage pool SN management",
    exit:"Exit",
    pledgeMessage:"The current wallet address cannot be pledged on this storage pool!",
    entrustingPledgeRecords:"Entrusting pledge records",
    pledgeMessage2:"Pledge at least 1UTG",
    rewardTransfer:"Reward Address Transfer",
    bindingRewardAddress:"Binding Reward Address",
    originalRewardAddress:"Original Reward Address",
    newRewardAddress:"New Reward Address",
    create:"Create",
    estimatedFactor:"Estimated Storage Factor",
    storagespaceprice:"Storage Space Price",
    storagespaceprice:"Storage Space Price",
    SPTransfer:"SP Transfer",
    bindingSP:"SP Binding",
    originalSP:"SP Original",
    newSP:"New SP",
    AdminTransfer:"Admin Transfer Address",
    bindingAdmin:"Binding Admin Address",
    originalAdmin:"Original Admin Address",
    newAdmin:"New Admin Address",
    addMesg:"Create a storage pool with a minimum pledge of 625 UTG"
  },
  nodeMove: {
    completeTransaction: "Txn Complete",
    TransferPledge:"Transfer in charge of pledge",
    message:"Please switch the wallet user to the pledge address",
    message2:"This pledge is not transferable",
    transfer:"Transfer",
    SPSpace:"SP Space Access",
    SPSpaceTotal:"SP Total Space",
    SPRewardRatio:"SP Reward Ratio",
    select:"Select",
    goalNode:"Target Node",
    distributionRatio:"Reward Distribution Ratio",
    transferablePledge:"Transferable Pledge Amount",
    theCurrentSP:"The Current SP",
    delegation:"Delegation",
    delegationType:"Delegation Type",
    nodeRewardRatio:"Node Reward Ratio",
    theCurrentNode:"The Current Node",
    storagePoolSpace:"Storage Pool Space",
    Waitpledgedamount:"Wait Pledged Amount",
    selectSN:"Select SN",
    selectPoS:"Select PoS",
  },
  rewards:{
    POSReward: "PoS Reward",
    POSDelegateReward:"PoS Delegate Reward",
    ServiceReward:"Service Reward",
    GrantReward:"Grant Reward",
    SPReward:"SP Reward",
    SPDelegateReward:"SP Delegate Reward",
    SNDelegateReward:"SN Delegate Reward",
    RewardTime:"Time",
    RewardDetails:"Reward Details",
    Reward:"Reward"
  }
};
